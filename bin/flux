#!/usr/bin/env node


var program = require('commander');
var path = require('path');
var pkg = require('../package.json');
var createApplicationAt = require('../lib/binary/createApplication');
var server = require('../lib/binary/server');

var version = pkg.version;

// CLI
var projectPath = process.cwd();

function range(val) {
  return val.split('..').map(Number);
}

function list(val) {
  return val.split(',');
}

function collect(val, memo) {
  memo.push(val);
  return memo;
}

function increaseVerbosity(v, total) {
  return total + 1;
}


program
	.version(version)
	.usage('[options] [dir]')
	.option('-p --port <port>', 'change the server port', parseInt, 3000)
	.option('-e --environment <env>', 'flux app run in <env> environment', String, 'development')
	.option('--fluxapp <version_or_url>', 'specify fluxApp version or url in target package.json');

program
	.command('init [<dir>]')
	.description('generate a flux-app framework into destination dir')
	.action(function(dir) {
		dir = path.resolve(dir || '.');
		projectPath = dir;
    	var options = {
    		path: dir,
    		version: program.fluxapp
    	};
    	createApplicationAt(options);
	});	

program
	.command('server')
	.alias('s')
	.description('launch flux app server')
	.action(function() {
    	server({
    		port: program.port,
    		appPath: process.cwd(),
    		environment: program.environment
    	})
	});

program
	.command('generate <type>')
	.alias('g')
	.description('generate flux actions, stores, fetchers, compnents...(etc.)')
	.action(function() {
    	console.log('generate');
	});

// program
// 	.command('*')
// 	.description('invalid comamand')
// 	.action(function(env) {
// 		console.log('invalid comamand', env);
// 	});

program.parse(process.argv);

