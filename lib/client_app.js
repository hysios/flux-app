// Generated by CoffeeScript 1.8.0
(function() {
  var AppBase, ClientApp, History, debug, path,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  path = require('path');

  AppBase = require('./app_base');

  History = require('history.js');

  debug = require('debug')('FluxApp:ClientApp');

  ClientApp = (function(_super) {
    __extends(ClientApp, _super);

    function ClientApp(options) {
      ClientApp.__super__.constructor.call(this, options);
      this.mountNode = options.mountNode || document.body;
    }

    ClientApp.prototype.bindRouter = function() {
      History.Adapter.bind(window, 'statechange', function() {
        var state;
        state = History.getState();
        return debug('statechange', state);
      });
      return {
        setRoute: function(path) {
          return History.pushState({}, null, path);
        },
        getCurrentPath: function() {
          return location.pathname;
        },
        run: function(callback) {
          var defaultContext;
          defaultContext = this.defaultContext({});
          this.runInContext(defaultContext, (function(_this) {
            return function(context, done) {};
          })(this));
          return this.matchRoute(this.getCurrentPath(), (function(_this) {
            return function(err, match) {
              var PageComponent;
              if (err) {
                debug('error:' + err + ' can\'t reslove this path ' + http.getPath() + ' in router');
                return http.next(err);
              }
              PageComponent = React.createFactory(match.fn(match.params, match.splats));
              if ("string" === typeof _this.mountNode) {
                _this.mountNode = document.getElementById(_this.mountNode);
              }
              return React.renderComponent(PageComponent, _this.mountNode);
            };
          })(this));
        }
      };
    };

    return ClientApp;

  })(AppBase);

  module.exports = function(options) {
    return new ClientApp(options);
  };

}).call(this);
