// Generated by CoffeeScript 1.8.0
(function() {
  var Context, Fetcher, debug;

  Fetcher = require('fetchr');

  debug = require('debug')('FluxApp:Context');

  Context = (function() {
    function Context(options) {
      this.dispatcher = options.dispatcher;
      this.app = options.app;
      this.id = Math.random() * 10000;
      this.http = options.http;
      this.fetcher = options.fetcher || new Fetcher({
        req: this.http.req
      });
      this.actionContext = this.getActionContext();
      this.componentContext = this.getComponentContext();
    }

    Context.prototype.getComponentContext = function() {
      return {
        executeAction: (function(_this) {
          return function(actionController, payload) {
            return actionController(actionCOntext, payload, function() {
              if (err) {
                return debug(err);
              }
            });
          };
        })(this),
        getStore: this.dispatcher.getStore.bind(this.dispatcher)
      };
    };

    Context.prototype.getActionContext = function() {
      return {
        dispatch: this.dispatcher.dispatch.bind(this.dispatcher),
        executeAction: (function(_this) {
          return function(actionController, payload, done) {
            return actionController(_this.actionContext, payload, done);
          };
        })(this),
        fetcher: this.fetcher,
        getStore: this.dispatcher.getStore.bind(this.dispatcher)
      };
    };

    Context.prototype.executeAction = function(action, payload, done) {
      return action(this, payload, done);
    };

    Context.prototype.dehydrate = function() {
      return {
        dispatcher: this.dispatcher.dehydrate()
      };
    };

    Context.prototype.rehydrate = function(obj) {
      return this.dispatcher.rehydrate(obj.dispatcher || {});
    };

    return Context;

  })();

  module.exports = Context;

}).call(this);
