// Generated by CoffeeScript 1.8.0
(function() {
  var App, Context, Dispatchr, Fetcher, React, ReactCurrentOwner, Router, debug, path;

  path = require("path");

  Dispatchr = require("dispatchr")();

  Context = require("./context");

  Dispatchr = require("dispatchr")();

  Fetcher = require("fetchr");

  Router = require("./router");

  React = require("react");

  debug = require("debug")("FluxApp:Base");

  ReactCurrentOwner = require("react/lib/ReactCurrentOwner");

  App = (function() {

    /**
    	 * [constructor description]
    	 * @param  {[type]} @options [description]
    	 * @return {[type]}          [description]
     */
    function App(options) {
      this.projectPath = path.resolve(options.projectPath) || process.cwd();
      this.appPath = path.join(this.projectPath, "app");
      this.appJsxName = options.appJsxName || "Application.jsx";
      this.values = {};
      debug("load routes files:", this.appPath + "/router.js");
      if (this.router == null) {
        this.router = new Router(this.appPath + "/router.js");
      }
      this.pagePrefix = options.pagePrefix || "Open";
      this.pageSuffix = options.pageSuffix || "Page";
      this.stores = options.stores || [];
      this.dispatcherAdapter = options.dispatcherAdapter || Dispatchr;
      this.dispatcher = options.dispatcher || new this.dispatcherAdapter({});
    }

    App.prototype.set = function(name, value) {
      this.values[name] = value;
      return null;
    };

    App.prototype.get = function(name) {
      return this.values[name];
    };

    App.prototype.createContext = function(context) {
      if (context == null) {
        context = {};
      }
      context["app"] = this;
      context["dispatcher"] = this.dispatcher;
      return new Context(context);
    };

    App.prototype.defaultContext = function(context) {
      if (this._defaultContext == null) {
        return this._defaultContext = this.createContext(context);
      }
    };

    App.prototype.runInNewContext = function(_context, callback) {
      var context;
      context = this.createContext(_context);
      return this.runInContext(context, callback);
    };

    App.prototype.runInContext = function(context, callback) {
      ReactCurrentOwner.current = context.actionContext;
      return callback(context, function() {
        if (context.destory && "function" === typeof context.destory) {
          context.destory();
        }
        return ReactCurrentOwner.current = null;
      });
    };

    App.prototype.matchRoute = function(path, callback) {
      var matchObject;
      matchObject = this.router.match(path);
      debug("match route::", path, "matchObject", matchObject);
      return callback((matchObject ? null : 404), matchObject);
    };

    return App;

  })();

  module.exports = App;

}).call(this);
