// Generated by CoffeeScript 1.8.0
(function() {
  var AppBase, Middleware, React, Router, ServerApp, String, debug, express, expressHtml, expressState, path, serverRender,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AppBase = require('./app_base');

  path = require('path');

  debug = require('debug')('FluxApp:ServerApp');

  express = require('express');

  expressState = require('express-state');

  React = require('react');

  Router = require('./router');

  String = require('./utils/String');

  Middleware = require('./middleware');

  expressHtml = require('lodash-express');

  serverRender = require('./utils/serverRender');

  ServerApp = (function(_super) {
    __extends(ServerApp, _super);

    function ServerApp(options) {
      if (options == null) {
        options = {};
      }
      ServerApp.__super__.constructor.call(this, options);
      this.httpApp = options.httpApp || null;
      if (this.httpApp != null) {
        this.setupHttpApp(this.httpApp);
      }
    }

    ServerApp.prototype.setupHttpApp = function(httpApp) {
      expressState.extend(httpApp);
      expressHtml(httpApp, 'html');
      httpApp.set('view engine', 'html');
      httpApp.set('views', this.appPath + '/pages');
      return httpApp.use(Middleware(this, this.middleware));
    };

    ServerApp.prototype.middleware = function(http) {
      return this.runInNewContext({
        http: http
      }, (function(_this) {
        return function(context, done) {
          return _this.matchRoute(http.getPath(), function(err, match) {
            var Action, PageComponent, page;
            if (err) {
              debug('error:' + err + ' can\'t reslove this path ' + http.getPath() + ' in router');
              return http.next(err);
            }
            PageComponent = React.createFactory(match.fn(http, match.params, match.splats));
            page = PageComponent({}, null);
            Action = _this.getPageAction(http.getPath());
            if (Action) {
              return context.actionContext.executeAction(Action, {}, function(err) {
                if (err) {
                  return done(err);
                }
                return serverRender(page, http, context, done);
              });
            } else {
              return serverRender(page, http, context, done);
            }
          });
        };
      })(this));
    };

    ServerApp.prototype.getPageAction = function(name) {
      var Action, ActionName, actionPath, e;
      if (name === "/") {
        name = "index";
      }
      ActionName = this.pagePrefix + String.capitalize(name) + this.pageSuffix;
      actionPath = path.join(this.appPath, "/actions/", ActionName);
      Action = null;
      try {
        Action = require(actionPath);
      } catch (_error) {
        e = _error;
        Action = null;
      }
      return Action;
    };

    return ServerApp;

  })(AppBase);

  module.exports = function(options) {
    return new ServerApp(options);
  };

}).call(this);
