// Generated by CoffeeScript 1.8.0
(function() {
  var CreateApplication, createApplicationAt, fs, init, initFile, mkdirp, path, semver, spawn,
    __slice = [].slice;

  path = require('path');

  mkdirp = require('mkdirp');

  init = require('init-package-json');

  fs = require('fs');

  semver = require('semver');

  spawn = require('child_process').spawn;

  initFile = path.resolve(process.env.HOME, '.npm-init');

  CreateApplication = (function() {
    function CreateApplication(options) {
      this.options = options != null ? options : {};
      this.path = this.options.path || process.cwd();
      this.fluxPath = path.resolve(__dirname + '../../../');
      this.version = this.options.version || this.getFluxVersion();
      this.packageName = path.join(this.path, '/package.json');
    }

    CreateApplication.prototype.getFluxVersion = function() {
      var pkg;
      pkg = require(path.resolve(__dirname + '../../../package.json'));
      return pkg.version;
    };

    CreateApplication.prototype.setup = function() {
      if (!fs.exists(this.packageName)) {
        return this.npmInit((function(_this) {
          return function(err, data) {
            _this.readPackage();
            _this.mkdir('app');
            _this.mkdir('app/actions');
            _this.mkdir('app/stores');
            _this.mkdir('app/fetchers');
            _this.mkdir('app/pages');
            _this.template('app/pages/_template.html');
            _this.template('app/pages/404.html');
            _this.mkdir('app/assets');
            _this.templateDir('app/assets');
            _this.mkdir('app/components');
            _this.mkdir('config');
            _this.template('config/environment.js');
            _this.mkdir('test');
            _this.template('.gitignore');
            _this.template('client.js');
            _this.template('server.js');
            _this.installDependencies('express', '4.10.1');
            _this.installDependencies('node-jsx', '0.12.0');
            _this.installDependencies('react', '0.12.0');
            _this.installDependencies('flux-app', _this.version);
            _this.savePackage();
            return _this.doSystemInstall();
          };
        })(this));
      }
    };

    CreateApplication.prototype.doSystemInstall = function() {
      var cmd;
      if (process.env.NODE_ENV !== 'test') {
        process.chdir(this.path);
        cmd = spawn('npm', ['install']);
        cmd.stdout.on('data', function(data) {
          return console.log(data.toString());
        });
        return cmd.stderr.on('data', function(data) {
          return console.log(data.toString());
        });
      }
    };

    CreateApplication.prototype.npmInit = function(callback) {
      var configData;
      if (!fs.exists(this.path)) {
        mkdirp(this.path);
      }
      configData = {
        'init-version': '0.0.1',
        'init-author-name': 'nobody',
        yes: true
      };
      return init(this.path, initFile, configData, callback);
    };

    CreateApplication.prototype.mkdir = function(_path) {
      this.log("\x1b[36mcreated\x1b[0m : ", _path);
      return mkdirp(path.join(this.path, _path));
    };

    CreateApplication.prototype.template = function(file) {
      return this.copyTemplate(file, file);
    };

    CreateApplication.prototype.templateDir = function(dir) {
      var file, list, _i, _len, _results;
      list = fs.readdirSync(path.join(this.fluxPath, 'templates', dir));
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        file = list[_i];
        _results.push(this.template(path.join(dir, file)));
      }
      return _results;
    };

    CreateApplication.prototype.copyTemplate = function(from, to) {
      from = path.join(this.fluxPath, 'templates', from);
      return this.write(to, fs.readFileSync(from, 'utf-8'));
    };

    CreateApplication.prototype.write = function(_path, str, mode) {
      fs.writeFile(path.join(this.path, _path), str, {
        mode: mode || 0x1b6
      });
      return this.log('\x1b[36mcreated\x1b[0m : ' + _path);
    };

    CreateApplication.prototype.log = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args.unshift('   ');
      return console.log.apply(null, args);
    };

    CreateApplication.prototype.readPackage = function() {
      return this.pkg = require(this.packageName);
    };

    CreateApplication.prototype.installDependencies = function(name, version) {
      var _base;
      if ((_base = this.pkg).dependencies == null) {
        _base.dependencies = {};
      }
      if (!this.pkg.dependencies[name]) {
        return this.pkg.dependencies[name] = semver.valid(version) ? "^" + version : version;
      }
    };

    CreateApplication.prototype.installDevDependencies = function(name, version) {
      var _base;
      if ((_base = this.pkg).devDependencies == null) {
        _base.devDependencies = {};
      }
      if (!this.pkg.devDependencies[name]) {
        return this.pkg.devDependencies[name] = "^" + version;
      }
    };

    CreateApplication.prototype.savePackage = function() {
      return fs.writeFileSync(this.packageName, JSON.stringify(this.pkg, null, 2) + "\n");
    };

    return CreateApplication;

  })();

  module.exports = createApplicationAt = function(path_or_options) {
    var application, options;
    options = 'string' === typeof path_or_options ? {
      path: path
    } : path_or_options;
    application = new CreateApplication(options);
    return application.setup();
  };

}).call(this);
